(in-package :ometa)
(declaim (optimize (safety 3) (debug 3)))

(defmacro optclauses (op)
  `(let ((clauses (cdr form)))
     (if (null clauses)
	 nil
	 (if (= (length clauses) 1)
	     (ometa-optimize (first clauses)) 
	     (let ((remaining (loop for f in clauses when (ometa-optimize f) collect it)))
	       (if (> (length remaining) 1)
		   `(,,op ,@remaining)
		   (ometa-optimize `(,,op ,@remaining))))))))

(defun ometa-optimize (form)
  (case (first form)
    ((:and  and)
     (optclauses :and))
    ((:or  or)
     (optclauses :or))
    ((:many) `(:many ,(ometa-optimize (second form))))
    ((prod :rule) `(:rule ,(second form) ,(third form) ,(ometa-optimize (fourth form))))
    ((:assign  assign) `(:assign ,(second form) ,(ometa-optimize (third form))))
    (otherwise form)))
